{"version":3,"file":"static/js/369.a9c579f4.chunk.js","mappings":"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","sources":["components/common/stats/index.jsx","components/common/statusPill/index.jsx","components/common/table/columns.jsx","components/common/table/data-table/data-table-pagination.jsx","components/common/table/data-table/index.jsx","helpers/format.js","pages/dashboard/recentTrade.jsx","components/charts/DailyPnlChart.jsx","components/charts/WeeklyPnlChart.jsx","components/charts/MonthlyPnlChart.jsx","pages/dashboard/index.jsx","state/api/charts/chartsApi.js"],"sourcesContent":["import { GetFormatedCurrency, GetFormatedPnl } from 'helpers/format';\r\nimport React from 'react';\r\nimport { AiOutlineLineChart } from \"react-icons/ai\";\r\nimport { LuDollarSign } from \"react-icons/lu\";\r\nimport { MdOutlineBarChart } from \"react-icons/md\";\r\nimport { PiChartLineUpBold } from \"react-icons/pi\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Statistics = () => {\r\n\r\n  const data = useSelector((state) => state.account?.stats, []);\r\n\r\n  return (\r\n    <div className=\"grid grid-rows-1 gap-7 mb-8 lg:grid-cols-4\">\r\n      <div className=\"flex flex-row justify-between h-24 rounded-md border border-gray-200 dark:border-gray-900 shadow-sm bg-white dark:bg-main-dark\">\r\n        <div className=\"ml-4 flex h-[90px] w-auto flex-row items-center\">\r\n          <div className=\"h-50 ml-3 flex w-auto flex-col justify-center\">\r\n            <p className=\"font-dm text-xs font-medium text-gray-400 mb-1\">Total Revenue</p>\r\n            <h4 className=\"text-xl font-medium dark:text-white\"><GetFormatedCurrency value={data?.totalRevenue} /></h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex item-center rounded-full p-3 mr-3 dark:bg-navy-700\">\r\n          <span className=\"flex items-center text-brand-500 dark:text-white\">\r\n            <AiOutlineLineChart className=\"w-7 h-7 text-gray-400\" />\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"flex flex-row justify-between h-24 rounded-md border border-gray-200 dark:border-gray-900 shadow-sm bg-white dark:bg-main-dark\">\r\n        <div className=\"ml-4 flex h-[90px] w-auto flex-row items-center\">\r\n          <div className=\"ml-3 flex w-auto flex-col justify-center\">\r\n            <p className=\"font-dm text-xs font-medium text-gray-400 mb-1\">Total PnL</p>\r\n            <h4 className=\"flex items-center text-xl font-medium dark:text-white\"><GetFormatedPnl value={data?.totalPnl} /></h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex item-center rounded-full p-3 mr-3 dark:bg-navy-700\">\r\n          <span className=\"flex items-center text-brand-500 dark:text-white\">\r\n            <LuDollarSign className=\"w-7 h-7 text-gray-400\" />\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"flex flex-row justify-between h-24 rounded-md border border-gray-200 dark:border-gray-900 shadow-sm bg-white dark:bg-main-dark\">\r\n        <div className=\"ml-4 flex h-[90px] w-auto flex-row items-center\">\r\n          <div className=\"h-50 ml-3 flex w-auto flex-col justify-center\">\r\n            <p className=\"font-dm text-xs font-medium text-gray-400 mb-1\">Winrate</p>\r\n            <h4 className=\"text-xl font-medium dark:text-white\">{data?.winrate || 0}%</h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex item-center rounded-full p-3 mr-3 dark:bg-navy-700\">\r\n          <span className=\"flex items-center text-brand-500 dark:text-white\">\r\n            <PiChartLineUpBold className=\"w-7 h-7 text-gray-400\" />\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"flex flex-row justify-between h-24 rounded-md border border-gray-200 dark:border-gray-900 shadow-sm bg-white dark:bg-main-dark\">\r\n        <div className=\"ml-4 flex h-[90px] w-auto flex-row items-center\">\r\n          <div className=\"h-50 ml-3 flex w-auto flex-col justify-center\">\r\n            <p className=\"font-dm text-xs font-medium text-gray-400 mb-1\">Total Trades</p>\r\n            <h4 className=\"text-xl font-medium dark:text-white\">{data?.totalTrades || 0}</h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex item-center rounded-full p-3 mr-3 dark:bg-navy-700\">\r\n          <span className=\"flex items-center text-brand-500 dark:text-white\">\r\n            <MdOutlineBarChart className=\"w-7 h-7 text-gray-400\" />\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Statistics;\r\n","import React from 'react'\r\nimport { classNames } from \"utils\";\r\n\r\nconst StatusPill = (props) => {\r\n    const { value } = props;\r\n    const status = value?.toLowerCase() || '';\r\n\r\n    return (\r\n        <span\r\n            className={\r\n                classNames(\r\n                    \"px-3 py-1 uppercase leading-wide font-bold text-xs rounded-xl shadow-sm\",\r\n                    status.startsWith(\"win\") ? \"border-2 border-green text-green\" : null,\r\n                    status.startsWith(\"pending\") ? \"bg-yellow-100 text-yellow-800\" : null,\r\n                    status.startsWith(\"loss\") ? \"border-2 border-red text-red\" : null,\r\n                )\r\n            }\r\n        >\r\n            {status}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default StatusPill;\r\n","import { classNames } from \"utils\";\r\nimport StatusPill from \"components/common/statusPill\";\r\nimport { formatDate } from \"utils\";\r\nimport { GetFormatedCurrency, GetFormatedPnl } from \"helpers/format\";\r\n\r\nexport const RecentTradeCols = [\r\n    {\r\n        accessorKey: \"Symbol\",\r\n        header: () => <span>Symbol</span>,\r\n        cell: ({ row }) => <div className=\"uppercase\">{row.getValue(\"Symbol\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"TradeStatus\",\r\n        header: () => <span>Status</span>,\r\n        cell: ({ row }) => (\r\n            <div className=\"capitalize\">\r\n                <StatusPill value={row.getValue(\"TradeStatus\")} />\r\n            </div>\r\n        )\r\n    },\r\n    {\r\n        accessorKey: \"EntryDate\",\r\n        header: () => <div className=\"capitalize\">Open Date</div>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{formatDate(row.getValue(\"EntryDate\"), 'dd/mm/yyyy')}</div>\r\n    },\r\n    {\r\n        accessorKey: \"ExitDate\",\r\n        header: () => <div className=\"capitalize\">Close Date</div>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{formatDate(row.getValue(\"ExitDate\"), 'dd/mm/yyyy')}</div>\r\n    },\r\n    {\r\n        accessorKey: \"Action\",\r\n        header: () => <div className=\"capitalize\">Action</div>,\r\n        cell: ({ row }) => <div className=\"uppercase\">{row.getValue(\"Action\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"NetPnL\",\r\n        header: () => <div className=\"capitalize text-center\">Net P&L</div>,\r\n        cell: ({ row }) => <div className=\"text-center whitespace-nowrap capitalize font-medium\"><GetFormatedPnl value={row.getValue(\"NetPnL\")} /></div>\r\n    },\r\n    {\r\n        accessorKey: \"NetRoi\",\r\n        header: () => <div className=\"capitalize text-center\">Net ROI</div>,\r\n        cell: ({ row }) => <div className=\"text-center whitespace-nowrap capitalize font-medium\"><GetFormatedPnl value={row.getValue(\"NetRoi\")} showPercentage={true} showCurrency={false} /></div>\r\n    },\r\n];\r\n\r\nexport const TradeColumns = [\r\n    {\r\n        accessorKey: \"Symbol\",\r\n        header: () => <span>Symbol</span>,\r\n        cell: ({ row }) => <div className=\"uppercase\">{row.getValue(\"Symbol\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"TradeStatus\",\r\n        header: () => <span>Status</span>,\r\n        cell: ({ row }) => (\r\n            <div className=\"capitalize\">\r\n                <StatusPill value={row.getValue(\"TradeStatus\")} />\r\n            </div>\r\n        )\r\n    },\r\n    {\r\n        accessorKey: \"EntryDate\",\r\n        header: () => <div className=\"capitalize\">Open Date</div>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{formatDate(row.getValue(\"EntryDate\"), 'dd/mm/yyyy')}</div>\r\n    },\r\n    {\r\n        accessorKey: \"ExitDate\",\r\n        header: () => <div className=\"capitalize\">Close Date</div>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{formatDate(row.getValue(\"ExitDate\"), 'dd/mm/yyyy')}</div>\r\n    },\r\n    {\r\n        accessorKey: \"Action\",\r\n        header: () => <div className=\"capitalize\">Action</div>,\r\n        cell: ({ row }) => <div className=\"uppercase\">{row.getValue(\"Action\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"NetPnL\",\r\n        header: () => <div className=\"capitalize\">Net P&L</div>,\r\n        cell: ({ row }) => <div className=\"flex items-center capitalize font-medium\"><GetFormatedPnl value={row.getValue(\"NetPnL\")} /></div>\r\n    },\r\n    {\r\n        accessorKey: \"NetRoi\",\r\n        header: () => <div className=\"capitalize\">Net ROI</div>,\r\n        cell: ({ row }) => <div className=\"flex items-center capitalize font-medium\"><GetFormatedPnl value={row.getValue(\"NetRoi\")} showPercentage={true} showCurrency={false} /></div>\r\n    },\r\n    {\r\n        accessorKey: \"EntryPrice\",\r\n        header: () => <div className=\"capitalize\">Entry Price</div>,\r\n        cell: ({ row }) => <div className=\"capitalize\"><GetFormatedCurrency value={row.getValue(\"EntryPrice\")} /></div>\r\n    },\r\n    {\r\n        accessorKey: \"ExitPrice\",\r\n        header: () => <div className=\"capitalize\">Exit Price</div>,\r\n        cell: ({ row }) => <div className=\"capitalize\"><GetFormatedCurrency value={row.getValue(\"ExitPrice\")} /></div>\r\n    },\r\n    {\r\n        accessorKey: \"StopLoss\",\r\n        header: () => <div className=\"capitalize\">Stop Loss</div>,\r\n        cell: ({ row }) => <div className=\"capitalize\"><GetFormatedCurrency value={row.getValue(\"StopLoss\")} /></div>\r\n    },\r\n    {\r\n        accessorKey: \"Quantity\",\r\n        header: () => <div className=\"capitalize\">Quantity</div>,\r\n        cell: ({ row }) => <div className=\"capitalize font-medium\">{row.getValue(\"Quantity\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"Setup\",\r\n        header: () => <div className=\"capitalize\">Setup</div>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"Setup\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"EntryReason\",\r\n        header: () => <div className=\"capitalize\">Entry Reason</div>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"EntryReason\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"ExitReason\",\r\n        header: () => <div className=\"capitalize\">Exit Reason</div>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"ExitReason\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"Emotions\",\r\n        header: () => <div className=\"capitalize\">Emotions</div>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"Emotions\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"MarketCondition\",\r\n        header: () => <div className=\"capitalize\">Market Condition</div>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"MarketCondition\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"AdditionalInfo\",\r\n        header: () => <div className=\"capitalize\">Additional Info</div>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"AdditionalInfo\")}</div>\r\n    },\r\n];\r\n\r\nexport const AccountColumns = [\r\n    {\r\n        accessorKey: \"AccountName\",\r\n        header: () => <span>Account Name</span>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"AccountName\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"Broker\",\r\n        header: () => <span>Broker</span>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"Broker\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"InitialBalance\",\r\n        header: () => <span>Balance</span>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"InitialBalance\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"Currency\",\r\n        header: () => <span>Currency</span>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"Currency\")}</div>\r\n    },\r\n];\r\n\r\nexport const TagsColumns = [\r\n    {\r\n        accessorKey: \"TagName\",\r\n        header: () => <span>Tag Name</span>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"TagName\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"TagType\",\r\n        header: () => <span>Type</span>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"TagType\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"TagDesc\",\r\n        header: () => <span>Description</span>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"TagDesc\")}</div>\r\n    },\r\n];\r\n\r\nexport const ImportHistColumns = [\r\n    {\r\n        accessorKey: \"Imported On\",\r\n        header: () => <span>Imported On</span>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"Imported On\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"Broker Name\",\r\n        header: () => <span>Broker Name</span>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"Broker Name\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"Account Name\",\r\n        header: () => <span>Account Name</span>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"Account Name\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"Total Trades\",\r\n        header: () => <span>Total Trades</span>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"Total Trades\")}</div>\r\n    },\r\n    {\r\n        accessorKey: \"File\",\r\n        header: () => <span>File</span>,\r\n        cell: ({ row }) => <div className=\"capitalize\">{row.getValue(\"File\")}</div>\r\n    },\r\n];","import { BiChevronLeft, BiChevronsLeft, BiChevronRight, BiChevronsRight } from 'react-icons/bi';\r\n\r\n\r\nexport function DataTablePagination({ table }) {\r\n    const buttonClass = \"p-1 border rounded-md shadow-sm border-gray-300 dark:border-gray-500 px-2 disabled:opacity-50 hover:bg-gray-200 dark:hover:bg-main-dark-bg disabled:pointer-events-none disabled:opacity-50\";\r\n    return (\r\n        <div className=\"flex flex-col space-y-3 sm:flex-row justify-end items-center sm:space-x-6 pt-3\">\r\n            <select\r\n                value={table.getState().pagination.pageSize}\r\n                onChange={(e) => {\r\n                    table.setPageSize(Number(e.target.value));\r\n                }}\r\n                className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block mt-3 p-1.5 pr-8 pl-3 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white\">\r\n                {[5, 10, 20, 30, 50].map((pageSize) => (\r\n                    <option key={pageSize} value={pageSize}>\r\n                        Show {pageSize}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n            <span className=\"flex items-center gap-1\">\r\n                <div>Page</div>\r\n                <strong>\r\n                    {table.getState().pagination.pageIndex + 1} of{\" \"}\r\n                    {table.getPageCount()}\r\n                </strong>\r\n            </span>\r\n            <div className=\"flex items-center space-x-2\">\r\n                <button\r\n                    onClick={() => table.setPageIndex(0)}\r\n                    disabled={!table.getCanPreviousPage()}\r\n                    className={buttonClass}>\r\n                    <BiChevronsLeft className=\"w-5 h-5\" />\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        table.previousPage();\r\n                    }}\r\n                    disabled={!table.getCanPreviousPage()}\r\n                    className={buttonClass}>\r\n                    <BiChevronLeft className=\"w-5 h-5\" />\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        table.nextPage();\r\n                    }}\r\n                    disabled={!table.getCanNextPage()}\r\n                    className={buttonClass}>\r\n                    <BiChevronRight className=\"w-5 h-5\" />\r\n                </button>\r\n                <button\r\n                    onClick={() => table.setPageIndex(table.getPageCount() - 1)}\r\n                    disabled={!table.getCanNextPage()}\r\n                    className={buttonClass}>\r\n                    <BiChevronsRight className=\"w-5 h-5\" />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { flexRender, getCoreRowModel, getFilteredRowModel, getPaginationRowModel, getSortedRowModel, useReactTable } from \"@tanstack/react-table\";\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate, createSearchParams } from 'react-router-dom';\r\nimport { DataTablePagination } from \"./data-table-pagination\";\r\nimport { MdDeleteOutline, MdEdit } from \"react-icons/md\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDeleteTradeMutation } from \"state/api/trade/tradeApi\";\r\n\r\nconst TradeTable = (props) => {\r\n\r\n    const { data, columns, pagination, isEdit } = props;\r\n\r\n    const [sorting, setSorting] = useState([]);\r\n    const [columnFilters, setColumnFilters] = useState([]);\r\n    const [rowSelection, setRowSelection] = useState({});\r\n\r\n    const table = useReactTable({\r\n        data,\r\n        columns,\r\n        onSortingChange: setSorting,\r\n        onColumnFiltersChange: setColumnFilters,\r\n        getCoreRowModel: getCoreRowModel(),\r\n        getPaginationRowModel: getPaginationRowModel(),\r\n        getSortedRowModel: getSortedRowModel(),\r\n        getFilteredRowModel: getFilteredRowModel(),\r\n        onRowSelectionChange: setRowSelection,\r\n        state: {\r\n            sorting,\r\n            columnFilters,\r\n            rowSelection\r\n        }\r\n    });\r\n\r\n    const navigate = useNavigate();\r\n    const useNavigateSearch = () => {\r\n        return (pathname, params) =>\r\n            navigate(`${pathname}?${createSearchParams(params)}`);\r\n    };\r\n    const navigateSearch = useNavigateSearch();\r\n\r\n    const id = useSelector((state) => state.account?.selectedAccount?.AccountId);\r\n\r\n    const [deleteTrade, { isLoading: isLoadingDelete }] = useDeleteTradeMutation();\r\n    const handleDeleteClick = async (TradeId) => {\r\n        try {\r\n            await deleteTrade({ AccountId: id, TradeId }).unwrap();\r\n        } catch (error) {\r\n            return;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"relative overflow-x-auto no-scrollbar shadow-md dark:shadow-2xl sm:rounded-md\">\r\n                <table className=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">\r\n                    <thead className=\"text-md text-gray-700 uppercase bg-gray-200 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600\">\r\n                        {table.getHeaderGroups().map(headerGroup => (\r\n                            <tr key={headerGroup.id}>\r\n                                {headerGroup.headers.map(header => {\r\n                                    return (\r\n                                        <th key={header.id} className=\"capitalize px-6 py-3 whitespace-nowrap\">\r\n                                            {header.isPlaceholder\r\n                                                ? null\r\n                                                : flexRender(\r\n                                                    header.column.columnDef.header,\r\n                                                    header.getContext()\r\n                                                )}\r\n                                        </th>\r\n                                    )\r\n                                })}\r\n                                {isEdit && <th scope=\"col\" className=\"capitalize px-6 py-3 text-center whitespace-nowrap\"></th>}\r\n                            </tr>\r\n                        ))}\r\n                    </thead>\r\n                    <tbody>\r\n                        {table.getRowModel().rows.length ? (\r\n                            table.getRowModel().rows.map((row, i) => (\r\n                                <tr\r\n                                    key={row.id}\r\n                                    onClick={() => navigateSearch('/tracking', { id: row?.original?.TradeId })}\r\n                                    className={`border-b dark:border-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 cursor-pointer ${i % 2 === 0 ? \"bg-white dark:bg-main-dark\" : \"bg-gray-100 dark:bg-primary-dark\"}`}>\r\n                                    {row.getVisibleCells().map((cell) => (\r\n                                        <td key={cell.id} className=\"px-6 py-4 whitespace-nowrap\">\r\n                                            {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                                        </td>\r\n                                    ))}\r\n\r\n                                    {isEdit &&\r\n                                        <td className=\"py-4 px-4 w-24 flex items-center justify-between whitespace-nowrap\" onClick={(e) => e.stopPropagation()}>\r\n                                            <button className=\"font-medium text-gray-900 dark:text-white hover:underline\" onClick={() => navigateSearch('/add-Trade', { id: row?.original?.TradeId })}><MdEdit className=\"w-5 h-5\" /></button>\r\n                                            <button className=\"font-medium text-red-600 dark:text-red-500 hover:underline\" onClick={() => handleDeleteClick(row?.original?.TradeId)}><MdDeleteOutline className=\"w-5 h-5\" /></button>\r\n                                        </td>\r\n                                    }\r\n                                </tr>\r\n                            ))\r\n                        ) : (\r\n                            <tr className=\"text-center h-32\">\r\n                                <td colSpan={12}>No Record Found!</td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            {pagination && <DataTablePagination table={table} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TradeTable;","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { AiFillCaretUp, AiFillCaretDown } from \"react-icons/ai\";\r\n\r\nexport const GetFormatedCurrency = (props) => {\r\n    const { value = 0 } = props;\r\n    const currency = useSelector((state) => state.account.selectedCurrency, []) || '';\r\n    const amount = currency + parseFloat(value).toFixed(2);\r\n\r\n    return (\r\n        <>\r\n            {amount}\r\n        </>\r\n    )\r\n}\r\n\r\nexport const GetFormatedPnl = (props) => {\r\n\r\n    const { value = 0, showCurrency = true, showPlusMinus = true, showPercentage = false, showIcon = false, showBracket = false } = props;\r\n    const currency = useSelector((state) => state.account.selectedCurrency, []) || '';\r\n\r\n    const conVal = parseInt(value);\r\n    const sign = showPlusMinus ? (conVal > 0 ? '+' : conVal < 0 ? '-' : '') : '';\r\n    const output = sign + ((showCurrency && !showPercentage) ? currency : '') + (Math.abs(parseFloat(value)).toFixed(2)) + (showPercentage ? '%' : '');\r\n\r\n    return (\r\n        <>\r\n            {showIcon ? (\r\n                conVal < 0 ? <AiFillCaretDown className=\"text-red mr-1\" /> : <AiFillCaretUp className=\"text-green mr-1\" />\r\n            ) : null}\r\n            <span className={conVal < 0 ? \"text-red\" : conVal > 0 ? \"text-green\" : 'dark:text-white'}>\r\n                {showBracket ? ('(' + output + ')') : output}\r\n            </span>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport TradeTable from 'components/common/table/data-table';\r\nimport { RecentTradeCols } from 'components/common/table/columns';\r\nimport { useGetRecentTradeQuery } from 'state/api/trade/tradeApi';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst RecentTrades = () => {\r\n\r\n    const id = useSelector((state) => state.account?.selectedAccount?.AccountId);\r\n    const { data, isLoading } = useGetRecentTradeQuery(id, {\r\n        refetchOnMountOrArgChange: true,\r\n        skip: !id\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h3 className='text-base font-medium dark:text-white my-4'>Recent Trades</h3>\r\n            <div className=\"flex flex-col h-auto mb-4 rounded-md border border-gray-200 dark:border-gray-900 shadow-sm bg-white dark:bg-main-dark\">\r\n                <TradeTable columns={RecentTradeCols} data={data || []} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecentTrades\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useGetDailyPnlReturnsQuery } from 'state/api/charts/chartsApi';\r\n\r\n// third-party\r\nimport ReactApexChart from 'react-apexcharts';\r\n\r\n// chart options\r\nconst areaChartOptions = {\r\n  chart: {\r\n    height: 365,\r\n    type: 'area',\r\n    toolbar: {\r\n      show: false\r\n    }\r\n  },\r\n  colors: [\"#7265e6\", \"#A195FD\"],\r\n  dataLabels: {\r\n    enabled: false\r\n  },\r\n  stroke: {\r\n    curve: 'smooth',\r\n    width: 2\r\n  },\r\n  grid: {\r\n    strokeDashArray: 0\r\n  }\r\n};\r\n\r\n// ==============================|| PnL AREA CHART ||============================== //\r\n\r\nconst DailyPnlChart = () => {\r\n\r\n  const currency = useSelector((state) => state.account.selectedCurrency, []) || '';\r\n  const id = useSelector((state) => state.account?.selectedAccount?.AccountId);\r\n  const { data, isLoading } = useGetDailyPnlReturnsQuery(id, {\r\n    refetchOnMountOrArgChange: true,\r\n    skip: !id,\r\n  });\r\n\r\n  const [series, setSeries] = useState([{\r\n    name: 'Daily P&L',\r\n    data: data?.TotalNetPnl\r\n  }]);\r\n\r\n  const [options, setOptions] = useState(areaChartOptions);\r\n  const currentMode = useSelector((state) => state.global.mode);\r\n\r\n  useEffect(() => {\r\n    setOptions((prevState) => ({\r\n      ...prevState,\r\n      grid: {\r\n        borderColor: `${currentMode === 'light' ? '#e5e7eb' : '#4b5563'}`,\r\n      },\r\n      xaxis: {\r\n        labels: {\r\n          style: {\r\n            colors: `${currentMode === 'light' ? '#111827' : '#9ca3af'}`,\r\n          }\r\n        }\r\n      },\r\n      yaxis: {\r\n        labels: {\r\n          style: {\r\n            colors: `${currentMode === 'light' ? '#111827' : '#9ca3af'}`,\r\n          }\r\n        }\r\n      },\r\n      tooltip: {\r\n        y: {\r\n          formatter(val) {\r\n            return `${currency + val}`;\r\n          }\r\n        }\r\n      },\r\n    }));\r\n\r\n    data && setSeries([{ name: 'Daily P&L', data: data?.TotalNetPnl }]);\r\n  }, [currentMode, data, isLoading]);\r\n\r\n  return <ReactApexChart options={options} series={series} type=\"area\" height={365} />;\r\n};\r\n\r\nexport default DailyPnlChart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useGetWeeklyPnlQuery } from 'state/api/charts/chartsApi';\r\n// third-party\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport { FaArrowUpLong } from \"react-icons/fa6\";\r\nimport { GetFormatedPnl } from 'helpers/format';\r\n\r\n// chart options\r\nconst WeeklyPnlChartOptions = {\r\n    chart: {\r\n        type: 'bar',\r\n        height: 325,\r\n        toolbar: {\r\n            show: false\r\n        }\r\n    },\r\n    colors: [\"#089981\"],\r\n    plotOptions: {\r\n        bar: {\r\n            colors: {\r\n                ranges: [{\r\n                    from: -1000000,\r\n                    to: 0,\r\n                    color: '#f23645'\r\n                }]\r\n            },\r\n            columnWidth: '45%',\r\n            borderRadius: 4\r\n        }\r\n    },\r\n    dataLabels: {\r\n        enabled: false\r\n    },\r\n    xaxis: {\r\n        categories: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\r\n        axisBorder: {\r\n            show: false\r\n        },\r\n        axisTicks: {\r\n            show: false\r\n        }\r\n    },\r\n    yaxis: {\r\n        show: false\r\n    },\r\n    grid: {\r\n        show: false\r\n    }\r\n};\r\n\r\n// ==============================|| Weekly PnL CHART ||============================== //\r\n\r\nconst WeeklyPnlChart = () => {\r\n\r\n    const currency = useSelector((state) => state.account.selectedCurrency, []) || '';\r\n    const id = useSelector((state) => state.account?.selectedAccount?.AccountId);\r\n    const { data, isLoading } = useGetWeeklyPnlQuery(id, {\r\n        refetchOnMountOrArgChange: true,\r\n        skip: !id,\r\n    });\r\n\r\n    const [series, setSeries] = useState([{ name: 'P&L', data: data?.netPnl }]);\r\n\r\n    const [options, setOptions] = useState(WeeklyPnlChartOptions);\r\n    const currentMode = useSelector((state) => state.global.mode);\r\n\r\n    useEffect(() => {\r\n        setOptions((prevState) => ({\r\n            ...prevState,\r\n            xaxis: {\r\n                categories: data?.categories || ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\r\n                labels: {\r\n                    style: {\r\n                        colors: `${currentMode === 'light' ? '#111827' : '#9ca3af'}`\r\n                    }\r\n                }\r\n            },\r\n            tooltip: {\r\n                y: {\r\n                    formatter(val) {\r\n                        return `${currency + val}`;\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        data && setSeries([{ name: 'P&L', data: data?.netPnl }]);\r\n    }, [currentMode, data, isLoading]);\r\n\r\n    return (\r\n        <div className=\"flex flex-col\">\r\n            <h3 className='text-base font-medium dark:text-white mb-2'>Weekly PnL</h3>\r\n            <div className=\"rounded-md border border-gray-200 dark:border-gray-900 shadow-sm bg-white dark:bg-main-dark\">\r\n                <h3 className='text-base font-medium text-gray-400 dark:text-white m-6'>This Week Statistics</h3>\r\n                <div className=\"w-full p-4 md:p-6 md:pt-0\">\r\n                    <div className=\"flex justify-between\">\r\n                        <div>\r\n                            <h5 className=\"leading-none text-[24px] font-semibold pb-2\">\r\n                                <GetFormatedPnl value={data?.totalNetPnL} />\r\n                            </h5>\r\n                        </div>\r\n                        <div className=\"flex items-center px-2.5 py-0.5 text-base font-semibold text-center\">\r\n                            <GetFormatedPnl value={data?.weeklyReturns} showIcon={true} showPlusMinus={false} showPercentage={true} />\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"chart\">\r\n                        <ReactApexChart options={options} series={series} type=\"bar\" height={325} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeeklyPnlChart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport { useGetMonthlyPnlQuery } from 'state/api/charts/chartsApi';\r\n\r\nconst MonthlyPnlChartOptions = {\r\n    chart: {\r\n        type: 'bar',\r\n        height: '140px',\r\n        fontFamily: 'Inter, sans-serif',\r\n        toolbar: {\r\n            show: false\r\n        }\r\n    },\r\n    colors: [\"#089981\", \"#A195FD\"],\r\n    plotOptions: {\r\n        bar: {\r\n            columnWidth: '45%',\r\n            borderRadius: 4\r\n        }\r\n    },\r\n    dataLabels: {\r\n        enabled: false\r\n    },\r\n    stroke: {\r\n        show: true,\r\n        width: 6,\r\n        colors: ['transparent']\r\n    },\r\n    xaxis: {\r\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n    },\r\n    fill: {\r\n        opacity: 1\r\n    },\r\n    legend: {\r\n        show: true,\r\n        fontFamily: `'Public Sans', sans-serif`,\r\n        offsetX: 10,\r\n        offsetY: 10,\r\n        labels: {\r\n            useSeriesColors: false\r\n        },\r\n        markers: {\r\n            width: 16,\r\n            height: 16,\r\n            offsexX: 2,\r\n            offsexY: 2\r\n        },\r\n        itemMargin: {\r\n            horizontal: 15,\r\n            vertical: 30\r\n        }\r\n    },\r\n};\r\n\r\nconst MonthlyPnlChart = () => {\r\n\r\n    const currency = useSelector((state) => state.account.selectedCurrency, []) || '';\r\n    const id = useSelector((state) => state.account?.selectedAccount?.AccountId);\r\n    const { data, isLoading } = useGetMonthlyPnlQuery(id, {\r\n        refetchOnMountOrArgChange: true,\r\n        skip: !id,\r\n    });\r\n\r\n    const [series, setSeries] = useState([\r\n        { name: 'Net Profit', data: data?.TotalNetPnL },\r\n        { name: 'Revenue', data: data?.TotalRevenue }\r\n    ]);\r\n    const [options, setOptions] = useState(MonthlyPnlChartOptions);\r\n    const currentMode = useSelector((state) => state.global.mode);\r\n\r\n    useEffect(() => {\r\n        setOptions((prevState) => ({\r\n            ...prevState,\r\n            grid: {\r\n                borderColor: `${currentMode === 'light' ? '#e5e7eb' : '#4b5563'}`,\r\n            },\r\n            xaxis: {\r\n                labels: {\r\n                    style: {\r\n                        colors: `${currentMode === 'light' ? '#111827' : '#9ca3af'}`,\r\n                    }\r\n                }\r\n            },\r\n            yaxis: {\r\n                labels: {\r\n                    style: {\r\n                        colors: `${currentMode === 'light' ? '#111827' : '#9ca3af'}`,\r\n                    }\r\n                }\r\n            },\r\n            legend: {\r\n                labels: {\r\n                    colors: `${currentMode === 'light' ? '#111827' : '#9ca3af'}`,\r\n                }\r\n            },\r\n            tooltip: {\r\n                y: {\r\n                    formatter(val) {\r\n                        return `${currency + val}`;\r\n                    }\r\n                }\r\n            },\r\n        }));\r\n\r\n        data && setSeries([\r\n            { name: 'Net Profit', data: data?.TotalNetPnL },\r\n            { name: 'Revenue', data: data?.TotalRevenue }\r\n        ]);\r\n    }, [currentMode, data, isLoading]);\r\n\r\n    return (\r\n        <div id='chart'>\r\n            <ReactApexChart options={options} series={series} type=\"bar\" height={430} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MonthlyPnlChart\r\n","import React from 'react';\r\nimport Statistics from 'components/common/stats';\r\nimport RecentTrades from './recentTrade';\r\nimport { useSelector } from 'react-redux';\r\nimport { GetFormatedPnl } from 'helpers/format';\r\nimport DailyPnlChart from 'components/charts/DailyPnlChart';\r\nimport WeeklyPnlChart from 'components/charts/WeeklyPnlChart';\r\nimport MonthlyPnlChart from 'components/charts/MonthlyPnlChart';\r\n\r\nconst Dashboard = () => {\r\n\r\n    const data = useSelector((state) => state.account?.stats, []);\r\n    const { netDailyPnl } = data || [];\r\n\r\n    return (\r\n        <div className=\"my-4 mt-8 lg:my-4\">\r\n            <Statistics />\r\n            <div className=\"grid grid-rows-1 gap-7 mb-8 lg:grid-cols-3 h-full\">\r\n                <div className=\"flex flex-col lg:col-span-2\">\r\n                    <h3 className='text-base font-medium dark:text-white mb-2'>Daily Net Cumulative P&L</h3>\r\n                    <div className=\"rounded-md border border-gray-200 dark:border-gray-900 shadow-sm bg-white dark:bg-main-dark\">\r\n                        <div className=\"flex m-4 mt-6\">\r\n                            <h5 className=\"flex leading-none text-base font-medium pb-2\">\r\n                                <GetFormatedPnl value={netDailyPnl} showIcon={true} />\r\n                            </h5>\r\n                        </div>\r\n                        <div className=\"w-full p-4 md:p-6 md:pt-0\">\r\n                            <DailyPnlChart />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <WeeklyPnlChart/>\r\n            </div>\r\n\r\n            <div className=\"grid grid-rows-1 gap-7 mb-8 h-auto\">\r\n                <div className=\"flex flex-col rounded-md border border-gray-200 dark:border-gray-900 shadow-sm bg-white dark:bg-main-dark\">\r\n                    <h3 className='text-base font-medium dark:text-white m-4'>Net Profit & Revenue</h3>\r\n                    <div className=\"w-full p-4 md:p-6\">\r\n                        <MonthlyPnlChart />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <RecentTrades />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import apiSlice from \"state/api\";\r\nimport { SetLoadingWithResults } from \"helpers\";\r\n\r\nconst chartApiSlice = apiSlice.injectEndpoints({\r\n    endpoints: builder => ({\r\n        getTotalPnl: builder.query({\r\n            query: (id = 0) => `trade/${id}/getTotalPnlStats`,\r\n            async onQueryStarted(args, { queryFulfilled, dispatch }) {\r\n                try {\r\n                    await SetLoadingWithResults(queryFulfilled, dispatch);\r\n                } catch (err) {\r\n                    return;\r\n                }\r\n            },\r\n            transformResponse: (response) => response.success ? response.tradeStats : [],\r\n            providesTags: [\"Charts\"]\r\n        }),\r\n        getDailyPnlReturns: builder.query({\r\n            query: (id = 0) => `trade/${id}/getDailyStats`,\r\n            async onQueryStarted(args, { queryFulfilled, dispatch }) {\r\n                try {\r\n                    await SetLoadingWithResults(queryFulfilled, dispatch);\r\n                } catch (err) {\r\n                    return;\r\n                }\r\n            },\r\n            transformResponse: (response) => response.success ? response.stats : [],\r\n            providesTags: [\"Charts\"]\r\n        }),\r\n        getWeeklyPnl: builder.query({\r\n            query: (id = 0) => `trade/${id}/getWeeklyStats`,\r\n            async onQueryStarted(args, { queryFulfilled, dispatch }) {\r\n                try {\r\n                    await SetLoadingWithResults(queryFulfilled, dispatch);\r\n                } catch (err) {\r\n                    return;\r\n                }\r\n            },\r\n            transformResponse: (response) => response.success ? response.weeklyPnl : [],\r\n            providesTags: [\"Charts\"]\r\n        }),\r\n        getMonthlyPnl: builder.query({\r\n            query: (id = 0) => `trade/${id}/getMonthlyStats`,\r\n            async onQueryStarted(args, { queryFulfilled, dispatch }) {\r\n                try {\r\n                    await SetLoadingWithResults(queryFulfilled, dispatch);\r\n                } catch (err) {\r\n                    return;\r\n                }\r\n            },\r\n            transformResponse: (response) => response.success ? response.monthlyStats : [],\r\n            providesTags: [\"Charts\"]\r\n        }),\r\n    }),\r\n    overrideExisting: true\r\n});\r\n\r\nexport const { useGetTotalPnlQuery, useGetWeeklyPnlQuery, useGetMonthlyPnlQuery, useGetDailyPnlReturnsQuery } = chartApiSlice;"],"names":["data","useSelector","state","_state$account","account","stats","_jsxs","className","children","_jsx","GetFormatedCurrency","value","totalRevenue","AiOutlineLineChart","GetFormatedPnl","totalPnl","LuDollarSign","winrate","PiChartLineUpBold","totalTrades","MdOutlineBarChart","props","status","toLowerCase","classNames","startsWith","RecentTradeCols","accessorKey","header","cell","_ref","row","getValue","_ref2","StatusPill","_ref3","formatDate","_ref4","_ref5","_ref6","_ref7","showPercentage","showCurrency","TradeColumns","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","_ref23","_ref24","AccountColumns","_ref25","_ref26","_ref27","_ref28","TagsColumns","_ref29","_ref30","_ref31","ImportHistColumns","_ref32","_ref33","_ref34","_ref35","_ref36","DataTablePagination","table","buttonClass","getState","pagination","pageSize","onChange","e","setPageSize","Number","target","map","pageIndex","getPageCount","onClick","setPageIndex","disabled","getCanPreviousPage","BiChevronsLeft","previousPage","BiChevronLeft","nextPage","getCanNextPage","BiChevronRight","BiChevronsRight","columns","isEdit","_useState","useState","_useState2","_slicedToArray","sorting","setSorting","_useState3","_useState4","columnFilters","setColumnFilters","_useState5","_useState6","rowSelection","setRowSelection","useReactTable","onSortingChange","onColumnFiltersChange","getCoreRowModel","getPaginationRowModel","getSortedRowModel","getFilteredRowModel","onRowSelectionChange","navigate","useNavigate","navigateSearch","pathname","params","concat","createSearchParams","id","_state$account$select","selectedAccount","AccountId","_useDeleteTradeMutati","useDeleteTradeMutation","_useDeleteTradeMutati2","deleteTrade","handleDeleteClick","isLoading","_asyncToGenerator","_regeneratorRuntime","mark","_callee","TradeId","wrap","_context","prev","next","unwrap","t0","abrupt","stop","_x","apply","arguments","_Fragment","getHeaderGroups","headerGroup","headers","isPlaceholder","flexRender","column","columnDef","getContext","scope","getRowModel","rows","length","i","_row$original","original","getVisibleCells","stopPropagation","_row$original2","MdEdit","_row$original3","MdDeleteOutline","colSpan","_props$value","amount","selectedCurrency","parseFloat","toFixed","_props$value2","_props$showCurrency","_props$showPlusMinus","showPlusMinus","_props$showPercentage","_props$showIcon","showIcon","_props$showBracket","showBracket","currency","conVal","parseInt","output","Math","abs","AiFillCaretDown","AiFillCaretUp","_useGetRecentTradeQue","useGetRecentTradeQuery","refetchOnMountOrArgChange","skip","TradeTable","areaChartOptions","chart","height","type","toolbar","show","colors","dataLabels","enabled","stroke","curve","width","grid","strokeDashArray","_useGetDailyPnlReturn","useGetDailyPnlReturnsQuery","name","TotalNetPnl","series","setSeries","options","setOptions","currentMode","global","mode","useEffect","prevState","_objectSpread","borderColor","xaxis","labels","style","yaxis","tooltip","y","formatter","val","ReactApexChart","WeeklyPnlChartOptions","plotOptions","bar","ranges","from","to","color","columnWidth","borderRadius","categories","axisBorder","axisTicks","_useGetWeeklyPnlQuery","useGetWeeklyPnlQuery","netPnl","totalNetPnL","weeklyReturns","MonthlyPnlChartOptions","fontFamily","fill","opacity","legend","offsetX","offsetY","useSeriesColors","markers","offsexX","offsexY","itemMargin","horizontal","vertical","_useGetMonthlyPnlQuer","useGetMonthlyPnlQuery","TotalNetPnL","TotalRevenue","netDailyPnl","Statistics","DailyPnlChart","WeeklyPnlChart","MonthlyPnlChart","RecentTrades","chartApiSlice","apiSlice","injectEndpoints","endpoints","builder","getTotalPnl","query","undefined","onQueryStarted","args","queryFulfilled","dispatch","SetLoadingWithResults","transformResponse","response","success","tradeStats","providesTags","getDailyPnlReturns","_callee2","_context2","getWeeklyPnl","_callee3","_context3","weeklyPnl","getMonthlyPnl","_callee4","_context4","monthlyStats","overrideExisting","useGetTotalPnlQuery"],"sourceRoot":""}