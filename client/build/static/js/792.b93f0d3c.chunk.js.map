{"version":3,"file":"static/js/792.b93f0d3c.chunk.js","mappings":"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","sources":["components/common/full-calendar/index.jsx","pages/calendar/pnl-popup.jsx","pages/calendar/index.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { handleDateClick } from 'state';\r\n\r\n//Calendar Imports\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport interactionPlugin from \"@fullcalendar/interaction\"\r\nimport multiMonthPlugin from '@fullcalendar/multimonth'\r\nimport './calendar.css'\r\nimport { useGetJournalCalendarQuery } from 'state/api/journal/journalApi';\r\nimport { formatDate } from 'utils/index';\r\n\r\nconst Calendar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const id = useSelector((state) => state.account?.selectedAccount?.AccountId, []);\r\n    const currency = useSelector((state) => state.account?.selectedCurrency, []) || '';\r\n    const { data, isLoading } = useGetJournalCalendarQuery(id, {\r\n        refetchOnMountOrArgChange: true,\r\n        skip: !id\r\n    });\r\n\r\n    const currentMode = useSelector((state) => state.global.mode);\r\n    const profitColor = currentMode === \"light\" ? \"#86efac\" : \"#166534\";\r\n    const lossColor = currentMode === \"light\" ? \"#fca5a5\" : \"#b91c1c\";\r\n\r\n    // Format the data for the full calendar format\r\n    const formatCalendarData = (calendarDetails) => {\r\n        return calendarDetails?.map(details => {\r\n            const { JournalDate, TradeStatus, TotalNetPnL } = details;\r\n            const title = `${TradeStatus} : ${currency + TotalNetPnL.toFixed(2)}`;\r\n            const date = formatDate(JournalDate, \"yyyy/mm/dd\");\r\n            const backgroundColor = TradeStatus.localeCompare(\"PROFIT\") === 0 ? profitColor : lossColor;\r\n            return { title, date, display: \"background\", backgroundColor };\r\n        });\r\n    }\r\n\r\n    \r\n    const handleDateClicks = (args) => {\r\n        if (!data || data.length === 0) return;\r\n        const activeDates = data?.map(d => formatDate(d.JournalDate, \"yyyy/mm/dd\"));\r\n        if (activeDates.includes(args.dateStr)) {\r\n            dispatch(handleDateClick({ date: args.dateStr }));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FullCalendar\r\n                plugins={[dayGridPlugin, multiMonthPlugin, interactionPlugin]}\r\n                headerToolbar={{\r\n                    left: 'prev,next today',\r\n                    center: 'title',\r\n                    right: 'multiMonthYear,dayGridMonth',\r\n                }}\r\n                events={formatCalendarData(data) || []}\r\n                dateClick={handleDateClicks}\r\n                height={\"80vh\"} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Calendar;","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { handleDateClick } from 'state';\r\nimport { BsDot } from \"react-icons/bs\";\r\nimport { BiChevronDown, BiChevronUp } from \"react-icons/bi\";\r\nimport { IoClose } from \"react-icons/io5\";\r\nimport AreaChart from 'components/charts/AreaChart';\r\nimport TradeTable from 'components/common/table/data-table';\r\nimport { TradeColumns } from 'components/common/table/columns';\r\nimport { useGetJournalDetailsQuery } from 'state/api/journal/journalApi';\r\nimport { GetFormatedCurrency, GetFormatedPnl } from 'helpers/format';\r\nimport { formatDate } from 'utils';\r\n\r\nconst PnlPopup = () => {\r\n\r\n    const pnlPopup = useSelector((state) => state.global.pnlPopup);\r\n    const [showTable, setShowTable] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const TradeDate = useSelector((state) => state.global.fullCalendar_date);\r\n    const id = useSelector((state) => state.account?.selectedAccount?.AccountId) || 0;\r\n    const { data: JournalDetails, isLoading } = useGetJournalDetailsQuery({ id, TradeDate }, {\r\n        skip: !TradeDate\r\n    });\r\n\r\n    const { JournalDate, TradeStatus, TotalNetPnL, Winrate, TotalTrades, TotalWins, TotalLoss, TotalFees, TradeDetails, TotalRevenue, TotalRoi, TotalRR } = JournalDetails || [];\r\n\r\n    const GetNetPnl = (TradeDetails) => {\r\n        return TradeDetails?.map(trade => trade.NetPnL) || [];\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {pnlPopup &&\r\n                <div className='fixed top-0 left-0 right-0 z-50 w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 max-h-full justify-center items-center sm:flex' onClick={() => dispatch(handleDateClick())}>\r\n                    <div className=\"relative w-full max-w-5xl max-h-full p-4 mt-8 z-50 bg-white rounded-lg shadow-lg dark:bg-main-dark\" onClick={(e) => e.stopPropagation()}>\r\n                        <div className=\"flex justify-between items-center my-2\">\r\n                            <div className=\"flex flex-col sm:flex-row justify-between w-[350px]\">\r\n                                <div>\r\n                                    <h3 className=\"text-base font-medium dark:text-white\">{formatDate(JournalDate, \"local-date\")}</h3>\r\n                                </div>\r\n                                <div className=\"hidden divider sm:flex\">\r\n                                    <BsDot className=\"h-6 w-6 text-gray-400 dark:text-gray-600\" />\r\n                                </div>\r\n                                <div className=\"flex\">\r\n                                    <h3 className={`text-base font-medium text-${TradeStatus?.toString()?.localeCompare(\"LOSS\") === 0 ? 'red' : 'green'}`}>Net PnL</h3>\r\n                                    <div className=\"flex mx-3 mt-1\">\r\n                                        <h5 className=\"flex leading-none text-base font-semibold pb-2\"><GetFormatedPnl value={TotalNetPnL} /></h5>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <button className=\"text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white\" onClick={() => dispatch(handleDateClick())}>\r\n                                    <IoClose className=\"w-6 h-6\" />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 my-6\">\r\n                            <div className=\"col-span-2 md:col-span-1 chart h-[125px]\">\r\n                                <AreaChart color={`${TradeStatus?.toString()?.localeCompare(\"LOSS\") === 0 ? '#f23645' : '#089981'}`} height={125} data={GetNetPnl(TradeDetails)} seriesName={\"Net P&L\"} />\r\n                            </div>\r\n                            <div className=\"flex flex-col justify-between my-4 mx-4\">\r\n                                <div className=\"flex flex-col sm:flex-row my-2 justify-between items-center\">\r\n                                    <h3 className='text-xs font-normal text-gray-400'>Total Trades</h3>\r\n                                    <span className='text-xs font-bold dark:text-white'>{TotalTrades}</span>\r\n                                </div>\r\n                                <div className=\"flex flex-col sm:flex-row my-2 justify-between items-center\">\r\n                                    <h3 className='text-xs font-normal text-gray-400'>Winrate</h3>\r\n                                    <p className='text-xs font-bold dark:text-white'>{Winrate}%</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"flex flex-col justify-between my-4 mx-4\">\r\n                                <div className=\"flex flex-col sm:flex-row my-2 justify-between items-center\">\r\n                                    <h3 className='text-xs font-normal text-gray-400'>Wins</h3>\r\n                                    <span className='text-xs font-bold dark:text-white'>{TotalWins}</span>\r\n                                </div>\r\n                                <div className=\"flex flex-col sm:flex-row my-2 justify-between items-center\">\r\n                                    <h3 className='text-xs font-normal text-gray-400'>Loss</h3>\r\n                                    <span className='text-xs font-bold dark:text-white'>{TotalLoss}</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"flex flex-col justify-between my-4 mx-4\">\r\n                                <div className=\"flex flex-col sm:flex-row my-2 justify-between items-center\">\r\n                                    <h3 className='text-xs font-normal text-gray-400'>Revenue</h3>\r\n                                    <p className='text-xs font-bold dark:text-white'><GetFormatedCurrency value={TotalRevenue} /></p>\r\n                                </div>\r\n                                <div className=\"flex flex-col sm:flex-row my-2 justify-between items-center\">\r\n                                    <h3 className='text-xs font-normal text-gray-400'>Net ROI</h3>\r\n                                    <p className='text-xs font-bold dark:text-white'>{TotalRoi}%</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"flex flex-col justify-between my-4 mx-4\">\r\n                                <div className=\"flex flex-col sm:flex-row my-2 justify-between items-center\">\r\n                                    <h3 className='text-xs font-normal text-gray-400'>Commission & Fees</h3>\r\n                                    <p className='text-xs font-bold dark:text-white'><GetFormatedCurrency value={TotalFees} /></p>\r\n                                </div>\r\n                                <div className=\"flex flex-col sm:flex-row my-2 justify-between items-center\">\r\n                                    <h3 className='text-xs font-normal text-gray-400'>Risk & Reward</h3>\r\n                                    <p className='text-xs font-bold dark:text-white'>{TotalRR}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`${!showTable && 'hidden sm:block'}`} onClick={() => dispatch(handleDateClick())}>\r\n                            <TradeTable columns={TradeColumns} data={TradeDetails || []} />\r\n                        </div>\r\n                        <div className=\"flex flex-row items-center justify-center my-4 sm:hidden\">\r\n                            <button onClick={() => setShowTable(!showTable)} className=\"flex flex-col items-center justify-center\">\r\n                                {showTable && <BiChevronUp className=\"dark:text-white cursor-pointer\" />}\r\n                                <h3 className=\"text-base dark:text-white cursor-pointer\">{showTable ? \"Less\" : \"More\"}</h3>\r\n                                {!showTable && <BiChevronDown className=\"dark:text-white cursor-pointer\" />}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PnlPopup\r\n","import React from 'react';\r\nimport FullCalendar from 'components/common/full-calendar';\r\nimport PnlPopup from './pnl-popup';\r\n\r\nconst PnLCalendar = () => {\r\n\r\n  return (\r\n    <div className=\"my-4 mt-8 lg:my-4\">\r\n      <FullCalendar />\r\n      <PnlPopup/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PnLCalendar;\r\n"],"names":["calendarDetails","dispatch","useDispatch","id","useSelector","state","_state$account","_state$account$select","account","selectedAccount","AccountId","currency","_state$account2","selectedCurrency","_useGetJournalCalenda","useGetJournalCalendarQuery","refetchOnMountOrArgChange","skip","data","currentMode","isLoading","global","mode","profitColor","lossColor","_jsx","_Fragment","children","FullCalendar","plugins","dayGridPlugin","multiMonthPlugin","interactionPlugin","headerToolbar","left","center","right","events","map","details","JournalDate","TradeStatus","TotalNetPnL","title","concat","toFixed","date","formatDate","display","backgroundColor","localeCompare","dateClick","args","length","d","includes","dateStr","handleDateClick","height","_TradeStatus$toString","_TradeStatus$toString2","pnlPopup","_useState","useState","_useState2","_slicedToArray","showTable","setShowTable","TradeDate","fullCalendar_date","_useGetJournalDetails","useGetJournalDetailsQuery","JournalDetails","_ref","Winrate","TotalTrades","TotalWins","TotalLoss","TotalFees","TradeDetails","TotalRevenue","TotalRoi","TotalRR","className","onClick","_jsxs","e","stopPropagation","BsDot","toString","GetFormatedPnl","value","IoClose","AreaChart","color","trade","NetPnL","GetNetPnl","seriesName","GetFormatedCurrency","TradeTable","columns","TradeColumns","BiChevronUp","BiChevronDown","PnlPopup"],"sourceRoot":""}